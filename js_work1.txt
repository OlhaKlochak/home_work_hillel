Вам необхідно вказати, яким буде результат операції та описати крок за кроком у вигляді коментарів, як відбувається перетворення в кожному прикладі:
'number' + 3 + 3
var num='number' + 3 + 3
console.log(nun);
Результат у консолі: number33, тому що відбулася конкатенація при додаванні строки до числа. Якби наш приклад трошки змінити на 'number' + (3 + 3), то спочатку виконається додавання числел, а потім конкатенація строки і числа.

null + 3
console.log(null + 3);
Результат у консолі: 3
null повертає null, це пустота, яка нічого не означає. Тому пустота + 3, поверне число 3.

5 && "qwerty"
var x;
var res = true && (x=5) && 'qwerty';
console.log(res);
Результат у консолі: qwerty
Тому що логічний оператор && "І" (AND) повертає останнє обчислене значення;
 
+'40' + +'2' + "hillel";
var result = +'40' + +'2' + "hillel";
console.log(result);
Результат у консолі: 42hillel
Тому що при арифметичній операції "Інкремент"  ++ відбулось додавання 40+2,у випадку + "hillel" відбулась конкатенція строк.

'10' - 5 === 6;
Результат у консолі: false 
тому що оператор строгої рівності (===): порівнює два значення на рівність як за значенням, так і за типом даних. В даному випадку 5 точно не дорівнює 6.


'4px' - 3
console.log('4px' - 3);
Результат у консолі:NaN. 
Арифметична операція віднімання числа від строки дає результат NaN, тобто значення, яке не дорівнює нічому.

'4' - 3
console.log('4' - 3);
Результат у консолі:1
Тому що Js завжди намагається привести все до числа. В даному випадку строка '4' була приведена до числа. Таким чином 4-3=1. Якби було додавання '4' + 3, то виконалася б конкатенація.

'6' + 3 ** 0;
console.log('6' + 3 ** 0);
Результат у консолі:61
Спочатку виконалося зведення в ступінь (3 в нульовій ступені=1), а після відбулась конкатенація.

12 / '6'
console.log(12 /'6');
Результат у консолі:2
Тому що Js завжди намагається привести все до числа. В даному випадку строка '6' була приведена до числа. Таким чином 12/6=2. 

'10' + (5 === 6);
console.log('10' + (5 === 6));
Результат у консолі:10false
Оператор строгої рівності (===): порівнює два значення на рівність. Повертає false - якщо значення різні. 5 === 6 повертає false. Далі відбулася конкатенація строки '10' та значення false.

null == ''
console.log(null == '');
Результат у консолі:false
Оператор рівності (==)порівнює два значення на рівність і поветрає false - якщо вони нерівні.'' пуста строка, тобто строка визнчена, хоч і не має значень у собі, а null - використовується, коли значення не визначено. Тому вони не можуть бути рівними.


3 ** (9 / 3);
console.log(3 ** (9 / 3));
Результат у консолі:27
В даному прикладі виконилося ділення 9/3 , після відбулося зведення в третю ступінь числа 3.


!!'false' == !!'true'
Результат у консолі: true
Оператор рівності (==): Порівнює два значення на рівність як за значенням, так і за типом даних. ! - інвертує строкове значення в булеве true.
!'false'-означає false, а !!'false' - поверне true.
!'true'- повене false, а !!'true'повертає true.
В даному випадку строкові значення як !!'false'- true, так і !!'true'повертає true.

0 || '0' && 1
console.log(0 || '0' && 1);
Результат у консолі:1
0 - повертає false
'0' - поверне true
&& - повертає якщо ми все ж таки дійшли до кінця - повертається останнє обчислене значення.
|| - цикл перевірки "або" - виходимо, як тільки знайшли хоч один true, але є ще && - який повертає останнє обчислене значення.

(+null == false) < 1;
console.log((+null == false) < 1);
Результат у консолі:false
+null- повертає 0, false теж означає 0,а 0 строго дорівнює 0 і це є true. В свою чергу true означає 1. Отже, 1 не може бути менше 1. Тому в результаті ми і отримали false.

false && true || true
console.log(false && true || true);
Результат у консолі:true
&& - повертає true, якщо обидва операнди є true, інакше повертає false.
Тому false && true - в консолі поверне false, тому що у нас обидва операнди не є true.
 Логічний оператор "АБО" (OR):
 || - логічний оператор повертає true, якщо хоча б один з операндів є true, інакше повертає false. Тому у випадку false || true поверне true.

false && (false || true);
console.log(false && (false || true));
Результат у консолі:false
В даному випадку спочатку виконається логічний оператор ||"АБО", який поверне значення true (логічний оператор повертає true, якщо хоча б один з операндів є true).
Потім виконається логічний оператор && "ТА", який повертає true, якщо обидва операнди є true. В даному прикладі false && true поверне false.

(+null == false) < 1 ** 5;
console.log((+null == false) < 1 ** 5);
Результат у консолі:false
+null- повертає 0, false теж означає 0,а 0 дорівнює 0 і це є true. В свою чергу true означає 1. Одиниця взведена у п'яту ступінь повертає одиницю. Отже, 1 не може бути менше 1. Тому в результаті ми і отримали false.
